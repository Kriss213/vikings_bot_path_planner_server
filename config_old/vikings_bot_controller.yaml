/**/controller_server:
  ros__parameters:
    #use_sim_time: True
    controller_frequency: 10.0
    min_x_velocity_threshold: 0.0
    min_y_velocity_threshold: 0.0
    min_theta_velocity_threshold: 0.0
    failure_tolerance: 0.3
    progress_checker_plugin: "progress_checker"
    goal_checker_plugins: ["general_goal_checker"] 
    controller_plugins: ["FollowPath"]
    cmd_vel_topic: cmd_vel


    # Progress checker parameters
    progress_checker:
      plugin: "nav2_controller::SimpleProgressChecker"
      required_movement_radius: 0.1
      movement_time_allowance: 15.0
    # Goal checker parameters
    general_goal_checker:
      stateful: True
      plugin: "nav2_controller::SimpleGoalChecker"
      xy_goal_tolerance: 0.3
      yaw_goal_tolerance: 0.10
    # DWB parameters
    FollowPath:
      plugin: "nav2_rotation_shim_controller::RotationShimController"
      primary_controller: "dwb_core::DWBLocalPlanner"
      angular_dist_threshold: 0.785
      forward_sampling_distance: 0.5
      rotate_to_heading_angular_vel: 0.5
      max_angular_accel: 3.2
      simulate_ahead_time: 1.0

      # plugin: "dwb_core::DWBLocalPlanner"
      debug_trajectory_details: True
      min_vel_x: 0.0
      min_vel_y: 0.0
      max_vel_x: 0.3
      max_vel_y: 0.0
      max_vel_theta: 0.5
      min_speed_xy: 0.0
      max_speed_xy: 0.26
      min_speed_theta: 0.0
      acc_lim_x: 2.5
      acc_lim_y: 0.0
      acc_lim_theta: 3.2
      decel_lim_x: -2.5
      decel_lim_y: 0.0
      decel_lim_theta: -3.2
      vx_samples: 20
      vy_samples: 5
      vtheta_samples: 30
      sim_time: 2.5
      linear_granularity: 0.05
      angular_granularity: 0.025
      transform_tolerance: 0.2
      #xy_goal_tolerance: 0.10
      #yaw_goal_tolerance: 0.10
      trans_stopped_velocity: 0.25
      short_circuit_trajectory_evaluation: True
      stateful: True
      #lookahead_dist: 0.0
      #critics: ["RotateToGoal", "Oscillation", "BaseObstacle", "GoalAlign", "PathAlign", "PathDist", "GoalDist"]
      critics: ["RotateToGoal", "Oscillation", "ObstacleFootprint", "GoalAlign", "PathAlign", "PathDist", "GoalDist"]
      #BaseObstacle.scale: 0.02
      ObstacleFootprint.scale: 0.02 # How much to avoid from obstacles
      PathAlign.scale: 0.0
      PathAlign.forward_point_distance: 0.1
      GoalAlign.scale: 0.0
      GoalAlign.forward_point_distance: 0.1
      PathDist.scale: 32.0 # 
      GoalDist.scale: 24.0 # How strong to reach local goal
      RotateToGoal.scale: 32.0
      RotateToGoal.xy_goal_tolerance: 0.10
      RotateToGoal.slowing_factor: -1.0
      RotateToGoal.lookahead_time: 1.0

/**/local_costmap:
  local_costmap:
    ros__parameters:
      update_frequency: 5.0
      publish_frequency: 2.0
      transform_tolerance: 0.5
      # global_frame: odom # set from launch file to add namespace
      map_topic: /map # common map server for all bots
      # robot_base_frame: base_link # set from launch file to add namespace
      #use_sim_time: True
      rolling_window: True
      width: 4
      height: 4
      resolution: 0.025
      footprint: "[[0.81, 0.46], [-0.31, 0.46], [-0.31, -0.46], [0.81, -0.46]]"
      plugins: ["obstacle_layer", "inflation_layer"]
      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        cost_scaling_factor: 4.0
        inflation_radius: 0.65
      obstacle_layer:
        plugin: "nav2_costmap_2d::ObstacleLayer"
        enabled: True
        max_obstacle_height: 2.0
        mark_threshold: 0
        observation_sources: scan
        scan:
          # topic: lidar_scan
          max_obstacle_height: 2.0
          clearing: True
          marking: True
          raytrace_max_range: 6.0
          raytrace_min_range: 0.0
          obstacle_max_range: 5.5
          obstacle_min_range: 0.0
      
      always_send_full_costmap: False
